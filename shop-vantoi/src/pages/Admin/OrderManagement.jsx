import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import Swal from "sweetalert2";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { robotoBase64 } from "../../components/RobotoFont";
import ExcelJS from "exceljs";
import { saveAs } from "file-saver";

const OrderManagement = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [showDropdownId, setShowDropdownId] = useState(null); // Tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm so√°t dropdown

  const navigate = useNavigate();

  useEffect(() => {
    fetchOrders();
  }, []);

  const fetchOrders = async () => {
    setLoading(true);
    setError("");
    try {
      const response = await fetch(
        "https://localhost:7022/minimal/api/get-orders"
      );
      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng.");
      const data = await response.json();
      setOrders(data || []); // ƒê·∫£m b·∫£o orders lu√¥n l√† m·∫£ng
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i t·ª´ s·ªë sang ch·ªØ v√† m√†u s·∫Øc
  const getStatusLabel = (status) => {
    switch (status) {
      case 0:
        return { label: "Ch·ªù x√°c nh·∫≠n", color: "text-warning" }; // M√†u v√†ng
      case 1:
        return { label: "ƒê√£ x√°c nh·∫≠n", color: "text-primary" }; // M√†u xanh d∆∞∆°ng
      case 2:
        return { label: "ƒêang giao h√†ng", color: "text-info" }; // M√†u xanh nh·∫°t
      case 3:
        return { label: "ƒê√£ giao h√†ng", color: "text-success" }; // M√†u xanh l√°
      case 4:
        return { label: "ƒê√£ h·ªßy", color: "text-danger" }; // M√†u ƒë·ªè
      default:
        return { label: "Kh√¥ng x√°c ƒë·ªãnh", color: "" };
    }
  };

  const handleStatusChange = async (id, currentStatus) => {
    const statuses = [
      { value: 0, label: "Ch·ªù x√°c nh·∫≠n" },
      { value: 1, label: "ƒê√£ x√°c nh·∫≠n" },
      { value: 2, label: "ƒêang giao h√†ng" },
      { value: 3, label: "ƒê√£ giao h√†ng" },
      { value: 4, label: "ƒê√£ h·ªßy" },
    ];

    // T·∫°o dropdown ƒë·ªÉ ch·ªçn tr·∫°ng th√°i
    const { value: newStatus } = await Swal.fire({
      title: "Ch·ªçn tr·∫°ng th√°i m·ªõi",
      input: "select",
      inputOptions: statuses.reduce((obj, status) => {
        obj[status.value] = status.label; // S·ª≠ d·ª•ng gi√° tr·ªã s·ªë cho inputOptions
        return obj;
      }, {}),
      showCancelButton: true,
      confirmButtonText: "C·∫≠p nh·∫≠t",
      cancelButtonText: "H·ªßy",
    });

    if (newStatus !== undefined) {
      try {
        // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i
        const response = await fetch(
          `https://localhost:7022/minimal/api/change-status-order?id=${id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ status: parseInt(newStatus) }), // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë
          }
        );

        if (!response.ok)
          throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.");

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë∆°n h√†ng
        setOrders(
          orders.map((order) =>
            order.id === id ? { ...order, status: parseInt(newStatus) } : order
          )
        );

        await Swal.fire({
          title: "Th√†nh c√¥ng!",
          text: `Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh "${
            getStatusLabel(parseInt(newStatus)).label
          }".`,
          icon: "success",
          confirmButtonText: "OK",
        });
      } catch (err) {
        await Swal.fire({
          title: "L·ªói!",
          text: err.message,
          icon: "error",
          confirmButtonText: "OK",
        });
      }
    }
  };
  const toUpperNonAccentVietnamese = (str) => {
    if (!str) return "";

    str = str.toLowerCase();
    // B·ªè d·∫•u ti·∫øng Vi·ªát
    str = str
      .replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a")
      .replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e")
      .replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i")
      .replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o")
      .replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u")
      .replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y")
      .replace(/ƒë/g, "d");

    // In hoa to√†n b·ªô
    return str.toUpperCase();
  };

  const handlePrintInvoice = async (order) => {
    try {
      const res = await fetch(
        `https://localhost:7022/minimal/api/get-order-by-id?id=${order.id}`
      );
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng");

      const data = await res.json();
      const orderDetail = data[0];

      const doc = new jsPDF();
      doc.addFileToVFS("Roboto.ttf", robotoBase64);
      doc.addFont("Roboto.ttf", "Roboto", "normal");
      doc.setFont("Roboto");

      // ===== HEADER v·ªõi logo & t√™n shop =====
      const image = new Image();
      image.src = "/assets/logo.png"; // ·∫£nh n·∫±m trong public

      image.onload = () => {
        doc.addImage(image, "PNG", 10, 6, 25, 25);
        doc.save(`hoa_don_${order.id}.pdf`);
      };

      image.onerror = () => {
        console.error("‚ùå Kh√¥ng th·ªÉ load ·∫£nh logo.");
        doc.save(`hoa_don_${order.id}.pdf`);
      };

      doc.setFillColor(255, 255, 255);
      doc.rect(0, 0, 210, 35, "F");
      doc.addImage(image, "PNG", 10, 6, 25, 25);
      doc.setTextColor(40, 40, 40);
      doc.setFontSize(16);
      doc.text("SHOP VANTOI", 40, 14);
      doc.setFontSize(11);
      doc.text("ƒê·ªãa ch·ªâ: P5, ƒê∆∞·ªùng Quang ƒê√¥ng, Tr√† Vinh", 40, 20);
      doc.text("SƒêT: 0123-456-789", 40, 26);

      doc.setFontSize(18);
      doc.setTextColor(0, 102, 204);
      doc.text("H√ìA ƒê∆†N MUA H√ÄNG", 105, 40, null, null, "center");

      // ===== KH√ÅCH H√ÄNG =====
      const fullName = orderDetail.address?.fullName || "N/A";
      const phone = orderDetail.address?.phone || "N/A";
      const finalAddress = orderDetail.address?.finalAddress || "N/A";
      const yStart = 50;

      doc.setFontSize(12);
      doc.setTextColor(0);
      doc.setFont(undefined, "bold");
      doc.text("TH√îNG TIN KH√ÅCH H√ÄNG", 14, yStart);
      doc.setFont(undefined, "normal");
      doc.text(`H·ªç t√™n: ${fullName}`, 14, yStart + 6);
      doc.text(`SƒêT: ${phone}`, 14, yStart + 12);
      doc.text(`ƒê·ªãa ch·ªâ: ${finalAddress}`, 14, yStart + 18);

      // ===== TABLE S·∫¢N PH·∫®M =====
      const tableY = yStart + 28;
      autoTable(doc, {
        startY: tableY,
        head: [["S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"]],
        body: (orderDetail.orderItems || []).map((item) => {
          const name =
            item.product?.productName ?? item.productName ?? "Kh√¥ng r√µ";
          const quantity = item.quantity || 0;
          const price = item.product?.discountPrice ?? item.discountPrice ?? 0;
          const total = quantity * price;
          return [
            name,
            quantity,
            `${price.toLocaleString()} VND`,
            `${total.toLocaleString()} VND`,
          ];
        }),
        theme: "grid",
        styles: {
          font: "Roboto",
          fontSize: 11,
          cellPadding: 5,
          halign: "center",
        },
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: "bold",
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245],
        },
      });

      // ===== T·ªîNG & NG√ÄY IN =====
      const finalY = doc.lastAutoTable.finalY + 10;
      doc.setFont(undefined, "bold");
      doc.setTextColor(0);
      doc.text(
        `T·ªîNG TI·ªÄN: ${orderDetail.totalPrice.toLocaleString()} VND`,
        14,
        finalY
      );
      doc.setFont(undefined, "normal");
      doc.text(
        `Ng√†y in: ${new Date().toLocaleDateString("vi-VN")}`,
        14,
        finalY + 6
      );

      // ===== CH·ªÆ K√ù =====
      doc.setFont(undefined, "bold");
      doc.text("Ng∆∞·ªùi l·∫≠p h√≥a ƒë∆°n", 160, finalY);
      doc.setFont(undefined, "normal");
      doc.line(150, finalY + 20, 190, finalY + 20);
      doc.text("TO VAN TOI", 160, finalY + 26);

      doc.save(`hoa_don_${order.id}.pdf`);
    } catch (err) {
      Swal.fire({
        title: "L·ªói!",
        text: err.message,
        icon: "error",
        confirmButtonText: "OK",
      });
    }
  };

  const handleExportToExcel = async (order) => {
    const res = await fetch(
      `https://localhost:7022/minimal/api/get-order-by-id?id=${order.id}`
    );
    const data = await res.json();
    const orderDetail = data[0];

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet("HOA_DON");

    // ===== HEADER =====
    sheet.mergeCells("A1", "D1");
    const headerCell = sheet.getCell("A1");
    headerCell.value = "üõçÔ∏è H√ìA ƒê∆†N MUA H√ÄNG - SHOP VANTOI";
    headerCell.font = { bold: true, size: 16, color: { argb: "FFFFFFFF" } };
    headerCell.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FF2E86C1" },
    };
    headerCell.alignment = { horizontal: "center" };

    // ===== TH√îNG TIN KH =====
    const fullName = orderDetail.address?.fullName || "N/A";
    const phone = orderDetail.address?.phone || "N/A";
    const finalAddress = orderDetail.address?.finalAddress || "N/A";

    sheet.addRow([]);
    sheet.addRow(["T√™n KH:", fullName, "SƒêT:", phone]);
    sheet.addRow(["ƒê·ªãa ch·ªâ:", finalAddress]);
    sheet.addRow([]);

    // ===== B·∫¢NG S·∫¢N PH·∫®M =====
    sheet.addRow(["S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"]);
    const headerRow = sheet.getRow(sheet.lastRow.number);
    headerRow.font = { bold: true, color: { argb: "FFFFFFFF" } };
    headerRow.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FF2E86C1" },
    };

    (orderDetail.orderItems || []).forEach((item) => {
      const name = item.product?.productName ?? item.productName ?? "Kh√¥ng r√µ";
      const quantity = item.quantity || 0;
      const price = item.product?.discountPrice ?? item.discountPrice ?? 0;
      const total = quantity * price;
      sheet.addRow([
        name,
        quantity,
        `${price.toLocaleString()} VND`,
        `${total.toLocaleString()} VND`,
      ]);
    });

    // ===== T·ªîNG & NG√ÄY =====
    sheet.addRow([]);
    const totalRow = sheet.addRow([
      `T·ªîNG TI·ªÄN: ${orderDetail.totalPrice.toLocaleString()} VND`,
    ]);
    totalRow.font = { bold: true };
    sheet.mergeCells(`A${totalRow.number}:D${totalRow.number}`);

    const dateRow = sheet.addRow([
      `NG√ÄY IN: ${new Date().toLocaleDateString("vi-VN")}`,
    ]);
    sheet.mergeCells(`A${dateRow.number}:D${dateRow.number}`);
    dateRow.font = { italic: true };

    // ===== EXPORT FILE =====
    const buffer = await workbook.xlsx.writeBuffer();
    const blob = new Blob([buffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, `hoa_don_${order.id}.xlsx`);
  };

  const handleShowPrintOptions = (order) => {
    Swal.fire({
      title: "Xu·∫•t h√≥a ƒë∆°n",
      html: "<b>B·∫°n mu·ªën xu·∫•t d∆∞·ªõi d·∫°ng:</b>",
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonText: "PDF",
      denyButtonText: "Excel",
      cancelButtonText: "H·ªßy",
    }).then((result) => {
      if (result.isConfirmed) {
        handlePrintInvoice(order); // Xu·∫•t PDF
      } else if (result.isDenied) {
        handleExportToExcel(order); // Xu·∫•t Excel
      }
    });
  };

  return (
    <motion.div className="container my-4">
      <motion.div
        className="card shadow-lg p-4"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
      >
        <motion.h1
          className="product-name-title mb-3"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          whileHover={{
            scale: 1.05,
            textShadow: "0px 2px 10px rgba(0, 0, 0, 0.2)",
          }}
        >
          <center>
            <i className="bi bi-cart-check-fill text-primary me-2"></i>
            QU·∫¢N L√ç ƒê∆†N H√ÄNG
          </center>
        </motion.h1>
        {error && <div className="alert alert-danger">{error}</div>}

        {loading ? (
          <div className="text-center">ƒêang t·∫£i...</div>
        ) : (
          <motion.div className="table-responsive">
            <motion.table className="table table-hover align-middle table-bordered">
              <thead className="table-dark">
                <tr className="text-center">
                  <th>ID</th>
                  <th>Ng√†y ƒë·∫∑t</th>
                  <th>Ph∆∞∆°ng th·ª©c</th>
                  <th>T·ªïng ti·ªÅn</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {orders.length > 0 ? (
                  orders.map((order) => {
                    const { label, color } = getStatusLabel(order.status);
                    return (
                      <motion.tr key={order.id}>
                        <td className="text-center">{order.id}</td>
                        <td>
                          {new Date(order.createdAt).toLocaleDateString(
                            "vi-VN"
                          )}
                        </td>
                        <td>{order.payment}</td>
                        <td>{order.totalPrice.toLocaleString()} VND</td>
                        <td className={`fw-bold ${color}`}>{label}</td>
                        <td className="d-flex flex-wrap gap-2 justify-content-center">
                          <button
                            className="btn btn-outline-info btn-sm"
                            onClick={() =>
                              navigate(`/admin/order-detail/${order.id}`)
                            }
                          >
                            <i className="bi bi-eye-fill me-1"></i>Chi ti·∫øt
                          </button>
                          <button
                            className="btn btn-outline-success btn-sm"
                            onClick={() => handleShowPrintOptions(order)}
                          >
                            <i className="bi bi-printer-fill me-1"></i>In
                          </button>
                          <button
                            className="btn btn-outline-warning btn-sm"
                            onClick={() =>
                              handleStatusChange(order.id, order.status)
                            }
                          >
                            <i className="bi bi-arrow-repeat me-1"></i>Tr·∫°ng
                            th√°i
                          </button>
                        </td>
                      </motion.tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="6" className="text-center">
                      Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                    </td>
                  </tr>
                )}
              </tbody>
            </motion.table>
          </motion.div>
        )}
      </motion.div>
    </motion.div>
  );
};

export default OrderManagement;
